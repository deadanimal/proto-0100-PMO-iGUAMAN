{"version":3,"file":"bar-rating.component.d.ts","sources":["/Users/muhdraziman/Downloads/PMO-iGUAMAN/node_modules/ngx-bar-rating/component/bar-rating.component.d.ts"],"sourcesContent":["import { EventEmitter, OnInit, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, Validator } from '@angular/forms';\nexport declare class BarRatingComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\n    private changeDetectorRef;\n    contexts: any[];\n    nextRate: number;\n    disabled: boolean;\n    /** Current rating. Can be a decimal value like 3.14 */\n    rate: any;\n    /** Maximal rating that can be given using this widget. */\n    max: number;\n    /** A flag indicating if rating can be updated. */\n    readOnly: boolean;\n    /** Set the theme */\n    theme: string;\n    /** Show rating title */\n    showText: boolean;\n    /** Replace rate value with a title */\n    titles: any[];\n    /** A flag indicating if rating is required for form validation. */\n    required: boolean;\n    /** An event fired when a user is hovering over a given rating.\n     * Event's payload equals to the rating being hovered over. */\n    hover: EventEmitter<number>;\n    /** An event fired when a user stops hovering over a given rating.\n     * Event's payload equals to the rating of the last item being hovered over. */\n    leave: EventEmitter<number>;\n    /** An event fired when a user selects a new rating.\n     * Event's payload equals to the newly selected rating. */\n    rateChange: EventEmitter<number>;\n    constructor(changeDetectorRef: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    update(newRate: number, internalChange?: boolean): void;\n    /** Reset rate value */\n    reset(): void;\n    private updateState(nextValue);\n    private handleClick(e, value);\n    private handleEnter(index);\n    /** This is the initial value set to the component */\n    writeValue(value: number): void;\n    validate(c: FormControl): {\n        required: boolean;\n    };\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    registerOnChange(fn: (value: any) => any): void;\n    registerOnTouched(fn: () => any): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;"}